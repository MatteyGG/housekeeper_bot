import { InlineKeyboard } from "grammy";
import { TodoTask, TASK_PRIORITIES, TASK_STATUSES, TaskFilters } from "../types";

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
export const getMainMenuKeyboard = () => {
  return new InlineKeyboard()
    .text("üìÖ –°–µ–≥–æ–¥–Ω—è", "todo_list_today_1")
    .text("üìÜ –ù–µ–¥–µ–ª—è", "todo_list_week_1")
    .row()
    .text("üìä –ú–µ—Å—è—Ü", "todo_list_month_1")
    .text("üìã –í—Å–µ –∑–∞–¥–∞—á–∏", "todo_list_all_1")
    .row()
    .text("‚ûï –ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞", "todo_quick_add");
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
export const getTaskListKeyboard = (tasks: TodoTask[], period: string, page: number, hasMore: boolean = false) => {
  const keyboard = new InlineKeyboard();
  
  tasks.forEach(task => {
    const statusIcon = getTaskStatusIcon(task);
    const priorityIcon = getPriorityIcon(task.priority);
    
    keyboard.text(
      `${statusIcon}${priorityIcon} ${truncateText(task.title, 18)}`,
      `todo_view_${task.id}`
    ).row();
  });
  
  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const paginationRow = [];
  if (page > 1) {
    paginationRow.push(InlineKeyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `todo_list_${period}_${page - 1}`));
  }
  if (hasMore) {
    paginationRow.push(InlineKeyboard.text("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", `todo_list_${period}_${page + 1}`));
  }
  
  if (paginationRow.length > 0) {
    keyboard.row(...paginationRow);
  }
  
  keyboard.row().text("üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "todo_main_menu");
  
  return keyboard;
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏
export const getTaskViewKeyboard = (task: TodoTask) => {
  return new InlineKeyboard()
    .text("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", `todo_complete_${task.id}`)
    .text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", `todo_edit_${task.id}`)
    .row()
    .text("‚è±Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä", `pomodoro_start_${task.id}`)
    .text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", `todo_delete_${task.id}`)
    .row()
    .text("üìã –ö —Å–ø–∏—Å–∫—É", `todo_list_today_1`);
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
export const getPriorityKeyboard = (taskId?: string) => {
  const keyboard = new InlineKeyboard();
  
  Object.values(TASK_PRIORITIES).forEach(priority => {
    const callbackData = taskId ? `todo_set_priority_${taskId}_${priority.value}` : `todo_priority_${priority.value}`;
    keyboard.text(priority.label, callbackData).row();
  });
  
  if (taskId) {
    keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `todo_edit_${taskId}`);
  }
  
  return keyboard;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export const getTaskStatusIcon = (task: TodoTask): string => {
  switch (task.status) {
    case 'COMPLETED': return '‚úÖ ';
    case 'IN_PROGRESS': return 'üîÑ ';
    default: return '‚è≥ ';
  }
};

export const getPriorityIcon = (priority: TodoTask['priority']): string => {
  switch (priority) {
    case 'URGENT': return 'üî¥';
    case 'HIGH': return 'üü°'; 
    case 'MEDIUM': return 'üü¢';
    case 'LOW': return 'üîµ';
    default: return '';
  }
};

export const truncateText = (text: string, maxLength: number): string => {
  return text.length > maxLength ? text.substring(0, maxLength) + "..." : text;
};

export const getPeriodName = (period: string): string => {
  const periodNames: Record<string, string> = {
    today: "—Å–µ–≥–æ–¥–Ω—è",
    week: "—ç—Ç—É –Ω–µ–¥–µ–ª—é", 
    month: "—ç—Ç–æ—Ç –º–µ—Å—è—Ü",
    all: "–≤—Å–µ –≤—Ä–µ–º—è"
  };
  return periodNames[period] || period;
};

export const formatTaskMessage = (task: TodoTask): string => {
  const status = TASK_STATUSES[task.status].label;
  const priority = TASK_PRIORITIES[task.priority].label;
  
  let message = `üéØ **${task.title}**\n\n`;
  message += `üìä –°—Ç–∞—Ç—É—Å: ${status}\n`;
  message += `üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priority}\n`;
  
  if (task.description) {
    message += `üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}\n`;
  }
  
  if (task.dueDate) {
    const dueDate = new Date(task.dueDate).toLocaleDateString('ru-RU');
    message += `üìÖ –°—Ä–æ–∫: ${dueDate}\n`;
  }
  
  if (task.duration) {
    message += `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${task.duration} –º–∏–Ω\n`;
  }
  
  if (task.assignee) {
    message += `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.assignee}\n`;
  }
  
  if (task.category) {
    message += `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${task.category}\n`;
  }
  
  if (task.estimatedPomodoros) {
    message += `üçÖ –ü–æ–º–∏–¥–æ—Ä—ã: ${task.completedPomodoros || 0}/${task.estimatedPomodoros}\n`;
  }
  
  if (task.totalTimeSpent > 0) {
    message += `‚è∞ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: ${task.totalTimeSpent} –º–∏–Ω\n`;
  }
  
  message += `\nüìÖ –°–æ–∑–¥–∞–Ω–∞: ${task.createdAt.toLocaleDateString('ru-RU')}`;
  
  return message;
};

// –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
export const TodoMessages = {
  mainMenu: "üéØ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
  taskList: (period: string, page: number, taskCount: number) => 
    `üìã **–ó–∞–¥–∞—á–∏ –Ω–∞ ${getPeriodName(period)}** (—Å—Ç—Ä. ${page}):\n\n` +
    `${taskCount === 0 ? "üö´ –ó–∞–¥–∞—á –Ω–µ—Ç - –º–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å!" : "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"}`,
  quickAddPrompt: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∑–∂–µ):",
  taskAdded: (title: string) => `‚úÖ –ó–∞–¥–∞—á–∞ "${title}" —Å–æ–∑–¥–∞–Ω–∞!`,
  taskView: "–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏:",
  completeConfirm: (title: string) => `‚úÖ –ó–∞–¥–∞—á–∞ "${title}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!`,
  deleteConfirm: (title: string) => `üóëÔ∏è –ó–∞–¥–∞—á–∞ "${title}" —É–¥–∞–ª–µ–Ω–∞!`,
  prioritySelect: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:"
};