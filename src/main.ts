import { bot } from "./core/bot/bot-instance";
import { connectDB } from "./core/database/database-connection";

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
import { registerInfoCommands } from "./core/info/info-commands";
import { registerAuthCommands } from "./core/auth/auth-commands";
import { registerFinanceModule } from "./modules/finance/finance-module";
import { requireAuth } from "./core/auth/auth-middleware";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
function initializeModules() {
  // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º core –º–æ–¥—É–ª–∏ (–Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
  registerInfoCommands();
  registerAuthCommands();
  
  // 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  bot.use(requireAuth);
  
  // 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ (—Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
  registerFinanceModule();
}

async function main() {
  try {
    // 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await connectDB();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ");

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
    initializeModules();
    console.log("‚úÖ –ú–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
    const me = await bot.api.getMe();
    console.log(`ü§ñ –ë–æ—Ç Housekeeper @${me.username} –∑–∞–ø—É—â–µ–Ω`);

    // 4. –ó–∞–ø—É—Å–∫–∞–µ–º long polling
    console.log("üîÑ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...");
    bot.start({
      onStart: (info: { username: string }) => {
        console.log(`üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (${info.username})`);
      },
      allowed_updates: ["message", "callback_query"],
    });
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err: { ctx: any; error: any }) => {
  const ctx = err.ctx;
  console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ ${ctx.update.update_id}:`, err.error);
  
  ctx.reply("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞").catch(console.error);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
main();